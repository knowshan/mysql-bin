#!/bin/bash

# == Author 
#    Shantanu Pavgi, knowshantanu@gmail.com
 

# == Description
#    Script to migrate on premise MySQL database to RDS

# == TODO 

# == Bugs

# == Example
#    ./migrate2rds -s $HOME/secrets/mysql_auth -r $HOME/secrets/rds_auth -d "db1 db2"
#      mysql_auth and rds_auth files should follow MySQL defaults-file INI format.
 
# Display usage
usage(){
cat << EOF
HELP:
Create database in the local MySQL server 
OPTIONS: 
-h|--help                  Display this usage message
-s|--source                Source database config file (Default: $HOME/.sc.my.cnf)
-r|--rds                   RDS database config file (Default: $HOME/.rds.my.cnf)
-d|--database              Database name to be migrated/replicated (Required)
-n|--no-op                 Dry run - Check master status and connection strings etc - NOOP - Not Implemented!

Format for connection-defaults file is same as MySQL 'defaults-file'. If this option is 
unspecified then default locations viz. '' will be tried by the mysql    
For details - run 'mysql -?' or refer MySQL manual.  
To run this command you will need at least following contents:
[client]
host='hostname.domainname'
user='<root-username>'
password='<root-password>'  
EOF
exit 0
}


# Declare defaults
declare sccnf_default="$HOME/.sc.my.cnf"
declare rdscnf_default="$HOME/.rds.my.cnf"
declare runmode_default=true
declare sslencryption_default=0

# Display usage help if script is called without any options
if [[ $# -eq 0 ]]; then 
  usage
fi

function read_options(){
# Get output (options list) from getopt  
  TEMP_OPTS=`getopt -o hs:r:d:ne --longoptions help,source-connection-config:,rds-connection-config:,database:,no-op,encryption-ssl -- "$@"`

  # $? exit code will be non-zero if options passed using $@ aren't passed according getopt command options  
  if [ $? != 0 ]; then 
    echo "ERROR: Terminating $0.." >&2 
    # Display help/usage and exit
    usage
    exit 1
  fi

  eval set -- "$TEMP_OPTS"

  # Start-While parse command-line options
  while true
  do
    case "$1" in
     -h|--help) 
      usage
      ;;
     -s|--source-connection-config)
      # read path to source mycnf file and shift by 2 
      sccnf=$2
      shift 2
      ;;
     -r|--rds-connection-config)
      # read path to rds mycnf file and shift by 2 
      rdscnf=$2
      shift 2
      ;;
     -d|--database) 
      dbname="$2";
      shift 2
      ;;
     -e|--encryption-ssl)
      sslencryption=1
      shift
      ;;
     -n|--no-op)
      runmode=false
      shift
      ;;
     --)
      # -- indicates end of options list - break out of the loop
      shift
      break
      ;;
     *)
      # For any option other than above - return Invalid Option error
      echo "ERROR: Invalid Option: $1" >&2
      exit 1 
     ;;
    esac 
  done 
  # End-While parse command-line options
}

# Process options and set/eval defaults 
function process_options(){
  if [[ -z "$dbname" ]]; then 
    echo "ERROR: -d <dbname> option is required. Run '$0 -h' to get usage help."
    exit 1
  fi
  # Set default values
  sccnf=${sccnf:=$sccnf_default}
  rdscnf=${rdscnf:=$rdscnf_default}
  runmode=${runmode:=$runmode_default}
  sslencryption=${sslencryption:=$sslencryption_default}
}

# Checks if given file exists and is readable; exit otherwise
function file_exists(){
  file_exists_ip=$1
  if [[ ! -r "$file_exists_ip" ]]; then
    echo "ERROR: $file_exists_ip file doesn't exist or unreadable." >&2
    exit 1
  fi 
}

# Checks if given db already exists - return 0 if exists
function db_exists(){
  mycnf_i=$1
  dbname_i=$2
  db_exists_command="mysql --defaults-file=$mycnf_i --skip-column-names -B -s -e \"show databases like '$dbname_i';\""
  db_ret=$(eval $db_exists_command)
  if [ "$dbname_i" == "$db_ret" ]; then
    return 0
  fi
  return 1
}

function master_exists(){
  mycnf_i="$1"
  slave_status=$(exec_query "$mycnf_i" "show slave status;" "$runmode")
  if [ -z "$slave_status" ]; then
    return 0
  else
    return 1
  fi
}

# Get master log file from dumpfile
function db_get_master_file(){
  dumpfile_i="$1"
  awk -F "'"  '/-- CHANGE MASTER/ {print $2 }' $dumpfile_i
}

# Get master log position from dumpfile
function db_get_master_pos(){
  dbname_i="$1"
  awk -F "MASTER_LOG_POS"  '/-- CHANGE MASTER/ {gsub(/=|;/, "", $2); print $2 }' $dumpfile_i
}

# Create mysqldump and save it to given dumpfile
function db_create_dump(){
  mycnf_i="$1"
  dbname_i="$2"
  dumpfile_i="$3"
  runmode_i="$4"
  cmd="mysqldump --defaults-extra-file=$mycnf_i --master-data=2 --databases ${dbname_i} > $dumpfile_i"
  echo "### Executing $cmd"
  if $runmode_i; then
    eval $cmd
  fi
}

# Create DBs
function create_db(){
  mycnf_i="$1"
  dbname_i="$2"
  runmode_i="$3"
  # string to array
  dbnames=($dbname_i)
  for d in "${dbnames[@]}"
  do
    create_db_command="CREATE DATABASE IF NOT EXISTS $d;"
    exec_query $mycnf_i "$create_db_command" "$runmode_i"
    create_db_exit_code="$?"
    # Tell user if db creation was successful; exit with an appropriate code
    if [[ $create_db_exit_code -eq 0 ]]; then  
      echo "### Created $d successfully."
    fi
  done
}

# Execute given mysql query
function exec_query(){
  mycnf_i="$1"
  query_i="$2"
  runmode_i="$3"
  echo "### Executing: $query_i"
  if $runmode_i; then
    mysql --defaults-file="$mycnf_i" -e "$query_i"
  fi
  return $?
}

# Main/FunctionCalls

# Read Input
read_options "$@"
# Process options
process_options
# Checks  
file_exists $sccnf
file_exists $rdscnf
db_exists $sccnf $dbname
ret="$?"
if [[ "$ret" == 0 ]]; then
  echo "### Found dayabase $dbname on source."
else
  echo "### $dbname not found on source"
  exit 1
fi
master_exists $rdscnf
ret="$?"
if [[ "$ret" == 1 ]]; then
  echo "### RDS is already connected to a replication master. Check current replication status before making any changes."
  exit 1
fi

# Run command
dumphost=$(awk -F '=' '/^host/ {print $2}' $sccnf | head -1)
datetime=$(date +%Y-%m-%d-%H-%M-%S)
dumpfile="$dumphost-$datetime.dump"
db_create_dump "$sccnf" "$dbname" "$dumpfile" $runmode

# Get log file name and position from the dumpfile
if $runmode; then
  mlf=`db_get_master_file $dumpfile`
  mlp=`db_get_master_pos $dumpfile`
else
  mlf='master-log-file'
  mlp='master-log-position'
fi
# Create database on RDS
create_db "$rdscnf" "$dbname" "$runmode"

# Load MySQL dump in given RDS instance
cmd="mysql --defaults-file=${rdscnf} < ${dumpfile}"
echo "### Loading MySQL dump to RDS $cmd"
if $runmode; then
  eval "${cmd}"
fi

#Ugly hack to correctly parse values/password containing = 
schost=$(awk -F '=' '/^host/ {print $2}' $sccnf | head -1)
scuser=$(awk -F '=' '/^user/ {print $2}' $sccnf | head -1)
scpassword=$(awk -F '=' '/^password/ {print $2}' $sccnf | head -1)
scpassword_t=$(sed -n '/^password/p' $sccnf | head -1)
scpassword=${scpassword_t#*=}
set_master="CALL mysql.rds_set_external_master ('$schost', 3306, '$scuser', '$scpassword', '$mlf', '$mlp', $sslencryption);"
start_repl="CALL mysql.rds_start_replication;"

# Execute RDS replication procedure calls
exec_query $rdscnf "$set_master" "$runmode"
exec_query $rdscnf "$start_repl" "$runmode"


