#!/bin/bash

# == Author 
#    Shantanu Pavgi, knowshantanu@gmail.com
 

# == Description
#    Script to migrate on premise MySQL database to RDS

# == TODO 

# == Bugs

# == Example
#    ./migrate2rds -c $HOME/secrets/mysql_auth -d awesomedb
#      mysql_auth file should be in same format as MySQL 'defaults-file'; it will be passed directly to the 
#      mysql client
 
# Display usage
usage(){
cat << EOF
HELP:
Create database in the local MySQL server 
OPTIONS: 
-h|--help                  Display this usage message
-s|--source                Source database config file (Default: $HOME/.sc.my.cnf)
-r|--rds                   RDS database config file (Default: $HOME/.rds.my.cnf)
-d|--database              Database name to be migrated/replicated (Required)
-n|--no-op                 Dry run - Check master status and connection strings etc - NOOP - Not Implemented!

Format for connection-defaults file is same as MySQL 'defaults-file'. If this option is 
unspecified then default locations viz. '' will be tried by the mysql    
For details - run 'mysql -?' or refer MySQL manual.  
To run this command you will need at least following contents:
[client]
host='hostname.domainname'
user='<root-username>'
password='<root-password>'  
EOF
exit 0
}


# Declare defaults
declare sccnf_default="$HOME/.sc.my.cnf"
declare rdscnf_default="$HOME/.rds.my.cnf"
declare runmode_default=true

# Display usage help if script is called without any options
if [[ $# -eq 0 ]]; then 
  usage
fi

function read_options(){
# Try following commands in 'regular' interactive bash session to get better grip over getopt

# Get output (options list) from getopt  
TEMP_OPTS=`getopt -o hs:r:d:n --longoptions help,source-connection-config:,rds-connection-config:,database:,no-op -- $@`

# $? exit code will be non-zero if options passed using $@ aren't passed according getopt command options  
if [ $? != 0 ]; then 
  echo "ERROR: Terminating $0.." >&2 
  # Display help/usage and exit
  usage
  exit 1
fi

eval set -- "$TEMP_OPTS"

# Start-While parse command-line options
while true
do
  case "$1" in
   -h|--help) 
    usage
    ;;
   -s|--source-connection-config)
    # read path to source mycnf file and shift by 2 
    sccnf=$2
    shift 2
    ;;
   -r|--rds-connection-config)
    # read path to rds mycnf file and shift by 2 
    rdscnf=$2
    shift 2
    ;;
   -d|--database) 
    dbname=$2;
    shift 2
    ;;
   -n|--no-op)
    runmode=false
    shift
    ;;
   --)
     # -- indicates end of options list - break out of the loop
     shift
     break
     ;;
   *)
     # For any option other than above - return Invalid Option error
     echo "ERROR: Invalid Option: $1" >&2
     exit 1 
     ;;
  esac 
done 
# End-While parse command-line options
}

# Process options and set/eval defaults 
function process_options(){
  if [[ -z "$dbname" ]]; then 
    echo "ERROR: -d <dbname> option is required. Run '$0 -h' to get usage help."
    exit 1
  fi
  # Set mycnf (--defaults-file) value according to input options
  # This will be used in constructing in actual commands 
  sccnf=${sccnf:=$sccnf_default}
  rdscnf=${rdscnf:=$rdscnf_default}
  runmode=${runmode:=$runmode_default}
}

# Checks if given file exists and is readable; exit otherwise
function file_exists(){
  file_exists_ip=$1
  if [[ ! -r "$file_exists_ip" ]]; then
    echo "ERROR: $file_exists_ip file doesn't exist or unreadable." >&2
    exit 1
  fi 
}

# Checks if given db already exists; continue if it doesn't exists
# IP:mycnf, dbname
# OP: exits with exit code 1 if db exists
function db_exists(){
  mycnf_i=$1
  dbname_i=$2
  db_exists_command="mysql --defaults-file=$mycnf_i --skip-column-names -B -s -e \"show databases like '$dbname_i';\""
  db_ret=$(eval $db_exists_command)
  echo $db_ret
  if [ "$dbname_i" == "$db_ret" ]; then
    return 0
  fi
  return 1
}

function db_get_master_file(){
  dbname_i="$1"
  # echo $dbname_i
  awk -F "'"  '/-- CHANGE MASTER/ {print $2 }' $dbname_i.dump
}

function db_get_master_pos(){
  dbname_i="$1"
  # echo $dbname_i
  awk -F "MASTER_LOG_POS"  '/-- CHANGE MASTER/ {gsub(/=|;/, "", $2); print $2 }' $dbname_i.dump
}

function db_create_dump(){
  mycnf_i="$1"
  dbname_i="$2"
  runmode_i="$3"
  echo "Creating mysqldump of $dbname_i using $mycnf_i configuration"
  if $runmode_i; then
    mysqldump --defaults-extra-file="$mycnf_i" --master-data=2 $dbname_i > $dbname_i.dump
  fi
}

# Tries to create given db
# IP: mycnf, dbname 
function create_db(){
  mycnf_i="$1"
  dbname_i="$2"
  runmode_i="$3"
  create_db_command="CREATE DATABASE IF NOT EXISTS $dbname_i;"
  exec_query $mycnf_i "$create_db_command" "$runmode_i"
  create_db_exit_code="$?"
  # Tell user if db creation was successful; exit with an appropriate code
  if [[ $create_db_exit_code -eq 0 ]]; then  
    echo "Created $dbname_i successfully."
  else 
    return $create_db_exit_code
  fi
}


function exec_query(){
  mycnf_i="$1"
  query_i="$2"
  runmode_i="$3"
  echo "# Executing: $query_i"
  if $runmode_i; then
    mysql --defaults-file="$mycnf_i" -e "$query_i"
  fi
  return $?
}


# Main/FunctionCalls

# Read Input: 
# Call read_options to read options using getopt
echo 'P'
read_options "$@"
# Process options
process_options
# Checks  
## Dry-Run to test connection, Check if db exists etc.
# file_exists $mycnf
db_exists $sccnf $dbname
ret="$?"
echo $ret
if [[ "$ret" == 0 ]]; then
  echo "Found $dbname on source"
else
  echo "$dbname not found on source host."
  exit 1
fi

# Run command
db_create_dump $sccnf $dbname $runmode

mlf=`db_get_master_file $dbname`
mlp=`db_get_master_pos $dbname`

create_db "$rdscnf" "$dbname" "$runmode"
if $runmode; then
  mysql --defaults-file="$rdscnf" "$dbname" < "$dbname.dump"
fi
schost=$(awk -F '=' '/^host/ {print $2}' $sccnf | head -1)
scuser=$(awk -F '=' '/^user/ {print $2}' $sccnf | head -1)
scpassword=$(awk -F '=' '/^password/ {print $2}' $sccnf | head -1)
set_master="CALL mysql.rds_set_external_master ('$schost', 3306, '$scuser', '$scpassword', '$mlf', '$mlp', 1);"
start_repl="CALL mysql.rds_start_replication;"

exec_query $rdscnf "$set_master" "$runmode"
exec_query $rdscnf "$start_repl" "$runmode"

